sort1 uses: Bubble Sort

How do you know?: The quick performance of sort1 on sorted data suggests it is likely Bubble Sort. This is because Bubble Sort is known to be efficient when data is already ordered, which matches the observed behavior. The Omega (best-case) time complexity of Bubble Sort being Î©(n) when data is sorted further supports this conclusion.

sort2 uses: Merge Sort

How do you know?: The superior performance of sort2 on the largest list, specifically reversed50000.txt, indicates that it is likely Merge Sort. This conclusion is supported by the observed time complexity, which aligns with Merge Sort's O(nlogn) complexity.

sort3 uses: Selection Sort

How do you know?: sort3 is likely using Selection Sort based on the extended time it took to complete the sorting process on an already sorted list. This behavior aligns with the characteristic time complexity of Selection Sort, which is O(n^2).


